!function(t,e){const n=e.getElementById("todoList"),o=e.getElementById("todoInput");var i=e.querySelectorAll(".enable-notifications");if("Notification"in t)for(var a=0;a<i.length;a++)i[a].style.display="inline-block",i[a].addEventListener("click",s);function s(){Notification.requestPermission((function(e){var n;console.log("User Choice",e),"granted"!==e?console.log("推播允許被拒絕了!"):"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(t){return n=t,t.pushManager.getSubscription()})).then((function(e){if(null===e){var o=function(e){for(var n=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),o=t.atob(n),i=new Uint8Array(o.length),a=0;a<o.length;++a)i[a]=o.charCodeAt(a);return i}("BFiLZTKIlQB8-sgzajf9emYyGoWef3yHfsveuWz77-97ZkyyHwypsrL1Ex-ankK-7KnJOzwK5BoQII2_kkL5brM");return n.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:o})}})).then((function(t){console.log("response",t),function(){if(console.log("in Display Notification"),"serviceWorker"in navigator){let e="../assets/images/logo_todo.png";var t={body:"歡迎使用TodoList",icon:e,image:e,dir:"ltr",lang:"zh-Hant",vibrate:[100,50,200],badge:"../assets/images/icon-192x192.png",tag:"confirm-notification",renotify:!0,actions:[{action:"confirm",title:"確認"},{action:"cancel",title:"取消"}]};navigator.serviceWorker.ready.then((function(e){e.showNotification("訂閱成功！！！",t)}))}}()})).catch((function(t){console.log("訂閱失敗",t)}))}))}self.addEventListener("notificationclick",(function(t){console.log(t);var e=t.notification,n=t.action;console.log(e),"confirm"===n?(console.log("使用者點選確認"),e.close()):console.log(n)})),self.addEventListener("notificationclose",(function(t){console.log("使用者沒興趣",t)}));let c=[];o.addEventListener("keydown",(t=>{if(13===t.keyCode&&t.target.value){let e=h(t.target.value);l(e)}})),n.addEventListener("click",(t=>{const e=t.target;e&&(e.matches("a.unfinished")||e.matches("a.finish")||e.matches(".desc"))?r(parseInt(e.dataset.id,10)):e&&e.matches("a.del")&&d(parseInt(e.dataset.id,10))})),fetch("http://localhost:3000/todolist").then((t=>t.json())).then((t=>{c=c.concat(t),g(c)})).catch((t=>{console.log(t)}));const l=t=>{console.log(t),fetch("http://localhost:3000/todolist",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((t=>t.json())).then((t=>{c.push(t),f(c)}))},r=t=>{const e=c.find((e=>e.id===t));e.isComplete=!e.isComplete,fetch(`http://localhost:3000/todolist/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).then((t=>{f(c)}))},d=t=>{fetch(`http://localhost:3000/todolist/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"}}).then((t=>t.json())).then((e=>{c=c.filter((e=>e.id!==t)),f(c)}))},h=t=>({desc:t,isComplete:!1});function f(t){g(t)}function g(t){const e=t.map(((t,e)=>`<li class="list">\n                <a class="${t.isComplete?"finish":"unfinish"}" data-id=${t.id}></a>\n                <p class="desc" data-id=${t.id}>\n                    ${t.desc}\n                </p>\n                <a class="del" data-id=${t.id}></a>\n\t\t\t\t\t\t</li>`)).join("");n.innerHTML=e}}(window,document);